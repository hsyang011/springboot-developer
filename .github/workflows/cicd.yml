# 워크플로의 이름 지정
name: CI/CD

# 워크플로가 시작될 조건 지정
on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-22.04  # 실행 환경 지정

    # 실행 스텝 지정
    steps:
      # 레포지토리 체크아웃
      - uses: actions/checkout@v3

      # Java 환경 설정
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 환경 변수 설정
      - name: Set environment variables
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "JWT_ISSUER=${{ secrets.JWT_ISSUER }}" >> $GITHUB_ENV
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> $GITHUB_ENV

      # Gradle 빌드 실행
      - name: Build with Gradle
        run: ./gradlew clean build

      # 현재 시간 가져오기
      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      # 배포용 패키지 경로 저장
      - name: Set artifact
        run: echo "artifact=$(ls ./build/libs)" >> $GITHUB_ENV

      # SSH 키 추가 및 EC2 배포
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # GitHub Secrets에 SSH 비공개 키 추가
          HOST: ${{ secrets.EC2_HOST }}                   # EC2 호스트 (예: 12.34.56.78)
          USER: ${{ secrets.EC2_USER }}                   # EC2 사용자 (예: ubuntu)
          ARTIFACT: ${{ env.artifact }}                   # 배포할 artifact 경로
        run: |
          # SSH 비공개 키를 파일로 저장
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem  # SSH 키에 권한 설정
          
          # EC2 서버의 호스트 키를 known_hosts에 추가
          ssh-keyscan -H $HOST >> ~/.ssh/known_hosts
          
          # EC2 서버에 배포 파일 전송
          scp -i private_key.pem ./build/libs/$ARTIFACT $USER@$HOST:/home/$USER/app/
          
          # EC2 서버에서 애플리케이션 실행
          ssh -i private_key.pem $USER@$HOST "java -jar /home/$USER/app/$ARTIFACT"

